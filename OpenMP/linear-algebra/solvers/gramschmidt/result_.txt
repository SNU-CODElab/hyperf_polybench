var: nj
var: nrm
var: i
var: ni
var: A
var: A dtype: float32
var: R
var: R dtype: float32
var: Q
var: Q dtype: float32
var: j
For loop init variable: k
For loop init variable: i
For loop init variable: i
For loop init variable: j
For loop init variable: i
For loop init variable: i
Index variable: k
Start expression: 0
End expression: nj[0]
Index variable: i
Start expression: 0
End expression: ni[0]
T.call_extern("float32", "sqrt", nrm[0])
Index variable: i
Start expression: 0
End expression: ni[0]
Index variable: j
Start expression: k + 1
End expression: nj[0]
Index variable: i
Start expression: 0
End expression: ni[0]
Index variable: i
Start expression: 0
End expression: ni[0]
for k in range(nj[0]):
    nj = T.Buffer((1,), "int32")
    nrm = T.Buffer((1,))
    nrm[0] = T.float32(0)
    ni = T.Buffer((1,), "int32")
    A = T.Buffer((512, 512))
    for i in range(ni[0]):
        nrm[0] = nrm[0] + A[i, k] * A[i, k]
    R_1 = T.Buffer((512, 512))
    R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
    Q = T.Buffer((512, 512))
    for i in range(ni[0]):
        Q[i, k] = A[i, k] / R_1[k, k]
    for j in range(k + 1, k + 1 + (nj[0] - (k + 1))):
        R_1[k, j] = T.float32(0)
        for i in range(ni[0]):
            R_1[k, j] = R_1[k, j] + Q[i, k] * A[i, j]
        for i in range(ni[0]):
            A[i, j] = A[i, j] - Q[i, k] * R_1[k, j]
# from tvm.script import tir as T

@T.prim_func
def main(A: T.Buffer((512, 512), "float32"), Q: T.Buffer((512, 512), "float32"), R_1: T.Buffer((512, 512), "float32"), ni: T.Buffer((1,), "int32"), nj: T.Buffer((1,), "int32"), nrm: T.Buffer((1,), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    for k in range(nj[0]):
        nrm[0] = T.float32(0)
        for i in range(ni[0]):
            nrm[0] = nrm[0] + A[i, k] * A[i, k]
        R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
        for i in range(ni[0]):
            Q[i, k] = A[i, k] / R_1[k, k]
        for j in range(k + 1, k + 1 + (nj[0] - (k + 1))):
            R_1[k, j] = T.float32(0)
            for i in range(ni[0]):
                R_1[k, j] = R_1[k, j] + Q[i, k] * A[i, j]
            for i in range(ni[0]):
                A[i, j] = A[i, j] - Q[i, k] * R_1[k, j]
# from tvm.script import tir as T

@T.prim_func
def main(A: T.Buffer((512, 512), "float32"), Q: T.Buffer((512, 512), "float32"), R_1: T.Buffer((512, 512), "float32"), ni: T.Buffer((1,), "int32"), nj: T.Buffer((1,), "int32"), nrm: T.Buffer((1,), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    with T.block("root"):
        T.reads()
        T.writes()
        for k in range(nj[0]):
            nrm[0] = T.float32(0)
            for i in range(ni[0]):
                nrm[0] = nrm[0] + A[i, k] * A[i, k]
            R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
            for i in range(ni[0]):
                Q[i, k] = A[i, k] / R_1[k, k]
            for j in range(k + 1, k + 1 + (nj[0] - (k + 1))):
                R_1[k, j] = T.float32(0)
                for i in range(ni[0]):
                    R_1[k, j] = R_1[k, j] + Q[i, k] * A[i, j]
                for i in range(ni[0]):
                    A[i, j] = A[i, j] - Q[i, k] * R_1[k, j]
var: nj
var: nrm
var: i
var: ni
var: A
var: A dtype: float32
var: R
var: R dtype: float32
var: Q
var: Q dtype: float32
var: j
For loop init variable: k
For loop init variable: i
For loop init variable: i
For loop init variable: j
For loop init variable: i
For loop init variable: i
Index variable: k
Start expression: 0
End expression: nj[0]
Index variable: i
Start expression: 0
End expression: ni[0]
T.call_extern("float32", "sqrt", nrm[0])
Index variable: i
Start expression: 0
End expression: ni[0]
Index variable: j
Start expression: k + 1
End expression: nj[0]
Index variable: i
Start expression: 0
End expression: ni[0]
Index variable: i
Start expression: 0
End expression: ni[0]
for k in range(nj[0]):
    nj = T.Buffer((1,), "int32")
    with T.LetStmt(T.Sub(k, 0), var=k):
        nrm = T.Buffer((1,))
        nrm[0] = T.float32(0)
        ni = T.Buffer((1,), "int32")
        A = T.Buffer((512, 512))
        for i in range(ni[0]):
            with T.LetStmt(T.Sub(i, 0), var=i):
                nrm[0] = nrm[0] + A[i, k] * A[i, k]
        R_1 = T.Buffer((512, 512))
        R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
        Q = T.Buffer((512, 512))
        for i in range(ni[0]):
            with T.LetStmt(T.Sub(i, 0), var=i):
                Q[i, k] = A[i, k] / R_1[k, k]
        for j in range(T.Sub(nj[0], 0)):
            R_1[k, j] = T.float32(0)
            for i in range(ni[0]):
                with T.LetStmt(T.Sub(i, 0), var=i):
                    R_1[k, j] = R_1[k, j] + Q[i, k] * A[i, j]
            for i in range(ni[0]):
                with T.LetStmt(T.Sub(i, 0), var=i):
                    A[i, j] = A[i, j] - Q[i, k] * R_1[k, j]
# from tvm.script import tir as T

@T.prim_func
def main(A: T.Buffer((512, 512), "float32"), Q: T.Buffer((512, 512), "float32"), R_1: T.Buffer((512, 512), "float32"), ni: T.Buffer((1,), "int32"), nj: T.Buffer((1,), "int32"), nrm: T.Buffer((1,), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    for k in range(nj[0]):
        with T.LetStmt(T.Sub(k, 0), var=k):
            nrm[0] = T.float32(0)
            for i in range(ni[0]):
                with T.LetStmt(T.Sub(i, 0), var=i):
                    nrm[0] = nrm[0] + A[i, k] * A[i, k]
            R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
            for i in range(ni[0]):
                with T.LetStmt(T.Sub(i, 0), var=i):
                    Q[i, k] = A[i, k] / R_1[k, k]
            for j in range(T.Sub(nj[0], 0)):
                R_1[k, j] = T.float32(0)
                for i in range(ni[0]):
                    with T.LetStmt(T.Sub(i, 0), var=i):
                        R_1[k, j] = R_1[k, j] + Q[i, k] * A[i, j]
                for i in range(ni[0]):
                    with T.LetStmt(T.Sub(i, 0), var=i):
                        A[i, j] = A[i, j] - Q[i, k] * R_1[k, j]
# from tvm.script import tir as T

@T.prim_func
def main(A: T.Buffer((512, 512), "float32"), Q: T.Buffer((512, 512), "float32"), R_1: T.Buffer((512, 512), "float32"), ni: T.Buffer((1,), "int32"), nj: T.Buffer((1,), "int32"), nrm: T.Buffer((1,), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    with T.block("root"):
        T.reads()
        T.writes()
        for k in range(nj[0]):
            with T.LetStmt(T.Sub(k, 0), var=k):
                nrm[0] = T.float32(0)
                for i in range(ni[0]):
                    with T.LetStmt(T.Sub(i, 0), var=i):
                        nrm[0] = nrm[0] + A[i, k] * A[i, k]
                R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
                for i in range(ni[0]):
                    with T.LetStmt(T.Sub(i, 0), var=i):
                        Q[i, k] = A[i, k] / R_1[k, k]
                for j in range(T.Sub(nj[0], 0)):
                    R_1[k, j] = T.float32(0)
                    for i in range(ni[0]):
                        with T.LetStmt(T.Sub(i, 0), var=i):
                            R_1[k, j] = R_1[k, j] + Q[i, k] * A[i, j]
                    for i in range(ni[0]):
                        with T.LetStmt(T.Sub(i, 0), var=i):
                            A[i, j] = A[i, j] - Q[i, k] * R_1[k, j]
var: nj
var: nrm
var: i
var: ni
var: A
var: A dtype: float32
var: R
var: R dtype: float32
var: Q
var: Q dtype: float32
var: j
For loop init variable: k
For loop init variable: i
For loop init variable: i
For loop init variable: j
For loop init variable: i
For loop init variable: i
Index variable: k
Start expression: 0
End expression: nj[0]
Index variable: i
Start expression: 0
End expression: ni[0]
T.call_extern("float32", "sqrt", nrm[0])
Index variable: i
Start expression: 0
End expression: ni[0]
Index variable: j
Start expression: k + 1
End expression: nj[0]
Index variable: i
Start expression: 0
End expression: ni[0]
Index variable: i
Start expression: 0
End expression: ni[0]
for k in range(nj[0]):
    nj = T.Buffer((1,), "int32")
    nrm = T.Buffer((1,))
    nrm[0] = T.float32(0)
    ni = T.Buffer((1,), "int32")
    A = T.Buffer((512, 512))
    for i in range(ni[0]):
        nrm[0] = nrm[0] + A[i, k] * A[i, k]
    R_1 = T.Buffer((512, 512))
    R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
    Q = T.Buffer((512, 512))
    for i in range(ni[0]):
        Q[i, k] = A[i, k] / R_1[k, k]
    for j in range(T.Sub(nj[0], 0)):
        with T.LetStmt(T.Sub(j, 0), var=j):
            R_1[k, j] = T.float32(0)
            for i in range(ni[0]):
                R_1[k, j] = R_1[k, j] + Q[i, k] * A[i, j]
            for i in range(ni[0]):
                A[i, j] = A[i, j] - Q[i, k] * R_1[k, j]
# from tvm.script import tir as T

@T.prim_func
def main(A: T.Buffer((512, 512), "float32"), Q: T.Buffer((512, 512), "float32"), R_1: T.Buffer((512, 512), "float32"), ni: T.Buffer((1,), "int32"), nj: T.Buffer((1,), "int32"), nrm: T.Buffer((1,), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    for k in range(nj[0]):
        nrm[0] = T.float32(0)
        for i in range(ni[0]):
            nrm[0] = nrm[0] + A[i, k] * A[i, k]
        R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
        for i in range(ni[0]):
            Q[i, k] = A[i, k] / R_1[k, k]
        for j in range(T.Sub(nj[0], 0)):
            with T.LetStmt(T.Sub(j, 0), var=j):
                R_1[k, j] = T.float32(0)
                for i in range(ni[0]):
                    R_1[k, j] = R_1[k, j] + Q[i, k] * A[i, j]
                for i in range(ni[0]):
                    A[i, j] = A[i, j] - Q[i, k] * R_1[k, j]
# from tvm.script import tir as T

@T.prim_func
def main(A: T.Buffer((512, 512), "float32"), Q: T.Buffer((512, 512), "float32"), R_1: T.Buffer((512, 512), "float32"), ni: T.Buffer((1,), "int32"), nj: T.Buffer((1,), "int32"), nrm: T.Buffer((1,), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    with T.block("root"):
        T.reads()
        T.writes()
        for k in range(nj[0]):
            nrm[0] = T.float32(0)
            for i in range(ni[0]):
                nrm[0] = nrm[0] + A[i, k] * A[i, k]
            R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
            for i in range(ni[0]):
                Q[i, k] = A[i, k] / R_1[k, k]
            for j in range(T.Sub(nj[0], 0)):
                with T.LetStmt(T.Sub(j, 0), var=j):
                    R_1[k, j] = T.float32(0)
                    for i in range(ni[0]):
                        R_1[k, j] = R_1[k, j] + Q[i, k] * A[i, j]
                    for i in range(ni[0]):
                        A[i, j] = A[i, j] - Q[i, k] * R_1[k, j]
var: nj
var: nrm
var: i
var: ni
var: A
var: A dtype: float32
var: R
var: R dtype: float32
var: Q
var: Q dtype: float32
var: j
For loop init variable: k
For loop init variable: i
For loop init variable: i
For loop init variable: j
For loop init variable: i
For loop init variable: i
Index variable: k
Start expression: 0
End expression: nj[0]
Index variable: i
Start expression: 0
End expression: ni[0]
T.call_extern("float32", "sqrt", nrm[0])
Index variable: i
Start expression: 0
End expression: ni[0]
Index variable: j
Start expression: k + 1
End expression: nj[0]
Index variable: i
Start expression: 0
End expression: ni[0]
Index variable: i
Start expression: 0
End expression: ni[0]
for k in range(nj[0]):
    nj = T.Buffer((1,), "int32")
    nrm = T.Buffer((1,))
    nrm[0] = T.float32(0)
    ni = T.Buffer((1,), "int32")
    A = T.Buffer((512, 512))
    for i in range(ni[0]):
        nrm[0] = nrm[0] + A[i, k] * A[i, k]
    R_1 = T.Buffer((512, 512))
    R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
    Q = T.Buffer((512, 512))
    for i in range(ni[0]):
        Q[i, k] = A[i, k] / R_1[k, k]
    for j in range(nj[0] - (k + 1)):
        with T.LetStmt(T.Add(j, 0), var=j):
            R_1[k, j] = T.float32(0)
            for i in range(ni[0]):
                R_1[k, j] = R_1[k, j] + Q[i, k] * A[i, j]
            for i in range(ni[0]):
                A[i, j] = A[i, j] - Q[i, k] * R_1[k, j]
# from tvm.script import tir as T

@T.prim_func
def main(A: T.Buffer((512, 512), "float32"), Q: T.Buffer((512, 512), "float32"), R_1: T.Buffer((512, 512), "float32"), ni: T.Buffer((1,), "int32"), nj: T.Buffer((1,), "int32"), nrm: T.Buffer((1,), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    for k in range(nj[0]):
        nrm[0] = T.float32(0)
        for i in range(ni[0]):
            nrm[0] = nrm[0] + A[i, k] * A[i, k]
        R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
        for i in range(ni[0]):
            Q[i, k] = A[i, k] / R_1[k, k]
        for j in range(nj[0] - (k + 1)):
            with T.LetStmt(T.Add(j, 0), var=j):
                R_1[k, j] = T.float32(0)
                for i in range(ni[0]):
                    R_1[k, j] = R_1[k, j] + Q[i, k] * A[i, j]
                for i in range(ni[0]):
                    A[i, j] = A[i, j] - Q[i, k] * R_1[k, j]
# from tvm.script import tir as T

@T.prim_func
def main(A: T.Buffer((512, 512), "float32"), Q: T.Buffer((512, 512), "float32"), R_1: T.Buffer((512, 512), "float32"), ni: T.Buffer((1,), "int32"), nj: T.Buffer((1,), "int32"), nrm: T.Buffer((1,), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    with T.block("root"):
        T.reads()
        T.writes()
        for k in range(nj[0]):
            nrm[0] = T.float32(0)
            for i in range(ni[0]):
                nrm[0] = nrm[0] + A[i, k] * A[i, k]
            R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
            for i in range(ni[0]):
                Q[i, k] = A[i, k] / R_1[k, k]
            for j in range(nj[0] - (k + 1)):
                with T.LetStmt(T.Add(j, 0), var=j):
                    R_1[k, j] = T.float32(0)
                    for i in range(ni[0]):
                        R_1[k, j] = R_1[k, j] + Q[i, k] * A[i, j]
                    for i in range(ni[0]):
                        A[i, j] = A[i, j] - Q[i, k] * R_1[k, j]
var: nj
var: nrm
var: i
var: ni
var: A
var: A dtype: float32
var: R
var: R dtype: float32
var: Q
var: Q dtype: float32
var: j
For loop init variable: k
For loop init variable: i
For loop init variable: i
For loop init variable: j
For loop init variable: i
For loop init variable: i
Index variable: k
Start expression: 0
End expression: nj[0]
Index variable: i
Start expression: 0
End expression: ni[0]
T.call_extern("float32", "sqrt", nrm[0])
Index variable: i
Start expression: 0
End expression: ni[0]
Index variable: j
Start expression: k + 1
End expression: nj[0]
Index variable: i
Start expression: 0
End expression: ni[0]
Index variable: i
Start expression: 0
End expression: ni[0]
for k in range(nj[0]):
    nj = T.Buffer((1,), "int32")
    nrm = T.Buffer((1,))
    nrm[0] = T.float32(0)
    ni = T.Buffer((1,), "int32")
    A = T.Buffer((512, 512))
    for i in range(ni[0]):
        nrm[0] = nrm[0] + A[i, k] * A[i, k]
    R_1 = T.Buffer((512, 512))
    R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
    Q = T.Buffer((512, 512))
    for i in range(ni[0]):
        Q[i, k] = A[i, k] / R_1[k, k]
    for j in range(nj[0] - (k + 1)):
        with T.LetStmt(j - (k + 1), var=j):
            R_1[k, j] = T.float32(0)
            for i in range(ni[0]):
                R_1[k, j] = R_1[k, j] + Q[i, k] * A[i, j]
            for i in range(ni[0]):
                A[i, j] = A[i, j] - Q[i, k] * R_1[k, j]
# from tvm.script import tir as T

@T.prim_func
def main(A: T.Buffer((512, 512), "float32"), Q: T.Buffer((512, 512), "float32"), R_1: T.Buffer((512, 512), "float32"), ni: T.Buffer((1,), "int32"), nj: T.Buffer((1,), "int32"), nrm: T.Buffer((1,), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    for k in range(nj[0]):
        nrm[0] = T.float32(0)
        for i in range(ni[0]):
            nrm[0] = nrm[0] + A[i, k] * A[i, k]
        R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
        for i in range(ni[0]):
            Q[i, k] = A[i, k] / R_1[k, k]
        for j in range(nj[0] - (k + 1)):
            with T.LetStmt(j - (k + 1), var=j):
                R_1[k, j] = T.float32(0)
                for i in range(ni[0]):
                    R_1[k, j] = R_1[k, j] + Q[i, k] * A[i, j]
                for i in range(ni[0]):
                    A[i, j] = A[i, j] - Q[i, k] * R_1[k, j]
# from tvm.script import tir as T

@T.prim_func
def main(A: T.Buffer((512, 512), "float32"), Q: T.Buffer((512, 512), "float32"), R_1: T.Buffer((512, 512), "float32"), ni: T.Buffer((1,), "int32"), nj: T.Buffer((1,), "int32"), nrm: T.Buffer((1,), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    with T.block("root"):
        T.reads()
        T.writes()
        for k in range(nj[0]):
            nrm[0] = T.float32(0)
            for i in range(ni[0]):
                nrm[0] = nrm[0] + A[i, k] * A[i, k]
            R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
            for i in range(ni[0]):
                Q[i, k] = A[i, k] / R_1[k, k]
            for j in range(nj[0] - (k + 1)):
                with T.LetStmt(j - (k + 1), var=j):
                    R_1[k, j] = T.float32(0)
                    for i in range(ni[0]):
                        R_1[k, j] = R_1[k, j] + Q[i, k] * A[i, j]
                    for i in range(ni[0]):
                        A[i, j] = A[i, j] - Q[i, k] * R_1[k, j]
var: nj
var: nrm
var: i
var: ni
var: A
var: A dtype: float32
var: R
var: R dtype: float32
var: Q
var: Q dtype: float32
var: j
For loop init variable: k
For loop init variable: i
For loop init variable: i
For loop init variable: j
For loop init variable: i
For loop init variable: i
Index variable: k
Start expression: 0
End expression: nj[0]
Index variable: i
Start expression: 0
End expression: ni[0]
T.call_extern("float32", "sqrt", nrm[0])
Index variable: i
Start expression: 0
End expression: ni[0]
Index variable: j
Start expression: k + 1
End expression: nj[0]
Index variable: i
Start expression: 0
End expression: ni[0]
Index variable: i
Start expression: 0
End expression: ni[0]
for k in range(nj[0]):
    nj = T.Buffer((1,), "int32")
    nrm = T.Buffer((1,))
    nrm[0] = T.float32(0)
    ni = T.Buffer((1,), "int32")
    A = T.Buffer((512, 512))
    for i in range(ni[0]):
        nrm[0] = nrm[0] + A[i, k] * A[i, k]
    R_1 = T.Buffer((512, 512))
    R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
    Q = T.Buffer((512, 512))
    for i in range(ni[0]):
        Q[i, k] = A[i, k] / R_1[k, k]
    for j in range(nj[0] - (k + 1)):
        with T.LetStmt(j + (k + 1), var=j):
            R_1[k, j] = T.float32(0)
            for i in range(ni[0]):
                R_1[k, j] = R_1[k, j] + Q[i, k] * A[i, j]
            for i in range(ni[0]):
                A[i, j] = A[i, j] - Q[i, k] * R_1[k, j]
# from tvm.script import tir as T

@T.prim_func
def main(A: T.Buffer((512, 512), "float32"), Q: T.Buffer((512, 512), "float32"), R_1: T.Buffer((512, 512), "float32"), ni: T.Buffer((1,), "int32"), nj: T.Buffer((1,), "int32"), nrm: T.Buffer((1,), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    for k in range(nj[0]):
        nrm[0] = T.float32(0)
        for i in range(ni[0]):
            nrm[0] = nrm[0] + A[i, k] * A[i, k]
        R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
        for i in range(ni[0]):
            Q[i, k] = A[i, k] / R_1[k, k]
        for j in range(nj[0] - (k + 1)):
            with T.LetStmt(j + (k + 1), var=j):
                R_1[k, j] = T.float32(0)
                for i in range(ni[0]):
                    R_1[k, j] = R_1[k, j] + Q[i, k] * A[i, j]
                for i in range(ni[0]):
                    A[i, j] = A[i, j] - Q[i, k] * R_1[k, j]
# from tvm.script import tir as T

@T.prim_func
def main(A: T.Buffer((512, 512), "float32"), Q: T.Buffer((512, 512), "float32"), R_1: T.Buffer((512, 512), "float32"), ni: T.Buffer((1,), "int32"), nj: T.Buffer((1,), "int32"), nrm: T.Buffer((1,), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    with T.block("root"):
        T.reads()
        T.writes()
        for k in range(nj[0]):
            nrm[0] = T.float32(0)
            for i in range(ni[0]):
                nrm[0] = nrm[0] + A[i, k] * A[i, k]
            R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
            for i in range(ni[0]):
                Q[i, k] = A[i, k] / R_1[k, k]
            for j in range(nj[0] - (k + 1)):
                with T.LetStmt(j + (k + 1), var=j):
                    R_1[k, j] = T.float32(0)
                    for i in range(ni[0]):
                        R_1[k, j] = R_1[k, j] + Q[i, k] * A[i, j]
                    for i in range(ni[0]):
                        A[i, j] = A[i, j] - Q[i, k] * R_1[k, j]
var: nj
var: nrm
var: i
var: ni
var: A
var: A dtype: float32
var: R
var: R dtype: float32
var: Q
var: Q dtype: float32
var: j
For loop init variable: k
For loop init variable: i
For loop init variable: i
For loop init variable: j
For loop init variable: i
For loop init variable: i
Index variable: k
Start expression: 0
End expression: nj[0]
Index variable: i
Start expression: 0
End expression: ni[0]
T.call_extern("float32", "sqrt", nrm[0])
Index variable: i
Start expression: 0
End expression: ni[0]
Index variable: j
Start expression: k + 1
End expression: nj[0]
Index variable: i
Start expression: 0
End expression: ni[0]
Index variable: i
Start expression: 0
End expression: ni[0]
for k in range(nj[0]):
    nj = T.Buffer((1,), "int32")
    nrm = T.Buffer((1,))
    nrm[0] = T.float32(0)
    ni = T.Buffer((1,), "int32")
    A = T.Buffer((512, 512))
    for i in range(ni[0]):
        nrm[0] = nrm[0] + A[i, k] * A[i, k]
    R_1 = T.Buffer((512, 512))
    R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
    Q = T.Buffer((512, 512))
    for i in range(ni[0]):
        Q[i, k] = A[i, k] / R_1[k, k]
    for j in range(nj[0] - (k + 1)):
        j_offset: T.int32 = j + (k + 1)
        R_1[k, j_offset] = T.float32(0)
        for i in range(ni[0]):
            R_1[k, j_offset] = R_1[k, j_offset] + Q[i, k] * A[i, j_offset]
        for i in range(ni[0]):
            A[i, j_offset] = A[i, j_offset] - Q[i, k] * R_1[k, j_offset]
# from tvm.script import tir as T

@T.prim_func
def main(A: T.Buffer((512, 512), "float32"), Q: T.Buffer((512, 512), "float32"), R_1: T.Buffer((512, 512), "float32"), ni: T.Buffer((1,), "int32"), nj: T.Buffer((1,), "int32"), nrm: T.Buffer((1,), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    for k in range(nj[0]):
        nrm[0] = T.float32(0)
        for i in range(ni[0]):
            nrm[0] = nrm[0] + A[i, k] * A[i, k]
        R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
        for i in range(ni[0]):
            Q[i, k] = A[i, k] / R_1[k, k]
        for j in range(nj[0] - (k + 1)):
            j_offset: T.int32 = j + (k + 1)
            R_1[k, j_offset] = T.float32(0)
            for i in range(ni[0]):
                R_1[k, j_offset] = R_1[k, j_offset] + Q[i, k] * A[i, j_offset]
            for i in range(ni[0]):
                A[i, j_offset] = A[i, j_offset] - Q[i, k] * R_1[k, j_offset]
# from tvm.script import tir as T

@T.prim_func
def main(A: T.Buffer((512, 512), "float32"), Q: T.Buffer((512, 512), "float32"), R_1: T.Buffer((512, 512), "float32"), ni: T.Buffer((1,), "int32"), nj: T.Buffer((1,), "int32"), nrm: T.Buffer((1,), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    with T.block("root"):
        T.reads()
        T.writes()
        for k in range(nj[0]):
            nrm[0] = T.float32(0)
            for i in range(ni[0]):
                nrm[0] = nrm[0] + A[i, k] * A[i, k]
            R_1[k, k] = T.call_extern("float32", "sqrt", nrm[0])
            for i in range(ni[0]):
                Q[i, k] = A[i, k] / R_1[k, k]
            for j in range(nj[0] - (k + 1)):
                j_offset: T.int32 = j + (k + 1)
                R_1[k, j_offset] = T.float32(0)
                for i in range(ni[0]):
                    R_1[k, j_offset] = R_1[k, j_offset] + Q[i, k] * A[i, j_offset]
                for i in range(ni[0]):
                    A[i, j_offset] = A[i, j_offset] - Q[i, k] * R_1[k, j_offset]
