# from tvm.script import tir as T

@T.prim_func
def main0(A: T.Buffer((512, 512), "float64"), Q: T.Buffer((512, 512), "float64"), R_1: T.Buffer((512, 512), "float64"), nrm: T.Buffer((1,), "float64")):
    T.func_attr({"tir.noalias": T.bool(True)})
    # with T.block("root"):
    for k in range(512):
        for i in range(512):
            with T.block("reduction_block: nrm"):
                k, i = T.axis.remap("SR", [k, i])
                with T.init():
                    nrm[0] = T.float64(0)
                nrm[0] = nrm[0] + A[i, k] * A[i, k]
        with T.block("block1"):
            R_1[k, k] = T.sqrt(nrm[0])
        for i_1 in range(512):
            with T.block("block0"):
                Q[i_1, k] = A[i_1, k] / R_1[k, k]
        for j in range(511 - k):
            for i_2 in range(512):
                with T.block("reduction_block: R"):
                    j, k, i_2 = T.axis.remap("SSR", [j, k, i_2])
                    with T.init():
                        R_1[k, j + k + 1] = T.float64(0)
                    R_1[k, j + k + 1] = R_1[k, j + k + 1] + Q[i_2, k] * A[i_2, j + k + 1]
            for i_3 in range(512):
                with T.block("reduction_block: A"):
                    i_3, j, k = T.axis.remap("SSR", [i_3, j, k])
                    with T.init():
                        T.evaluate(1)
                    A[i_3, j + k + 1] = A[i_3, j + k + 1] - Q[i_3, k] * R_1[k, j + k + 1]
