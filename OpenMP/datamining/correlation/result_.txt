var: m
var: mean
var: mean dtype: float32
var: i
var: n
var: data
var: data dtype: float32
var: float_n
For loop init variable: j
For loop init variable: i
Index variable: j
Start expression: 0
End expression: m[0]
Index variable: i
Start expression: 0
End expression: n[0]
for j in range(m[0]):
    m = T.Buffer((1,), "int32")
    mean = T.Buffer((4000,))
    mean[j] = T.float32(0)
    for i in range(n[0]):
        n = T.Buffer((1,), "int32")
        data = T.Buffer((4000, 4000))
        mean[j] = mean[j] + data[i, j]
    float_n = T.Buffer((1,))
    mean[j] = mean[j] / float_n[0]
# from tvm.script import tir as T

@T.prim_func
def main(data: T.Buffer((4000, 4000), "float32"), float_n: T.Buffer((1,), "float32"), m: T.Buffer((1,), "int32"), mean: T.Buffer((4000,), "float32"), n: T.Buffer((1,), "int32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    for j in range(m[0]):
        mean[j] = T.float32(0)
        for i in range(n[0]):
            mean[j] = mean[j] + data[i, j]
        mean[j] = mean[j] / float_n[0]
# from tvm.script import tir as T

@T.prim_func
def main(data: T.Buffer((4000, 4000), "float32"), float_n: T.Buffer((1,), "float32"), m: T.Buffer((1,), "int32"), mean: T.Buffer((4000,), "float32"), n: T.Buffer((1,), "int32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    with T.block("root"):
        T.reads()
        T.writes()
        for j in range(m[0]):
            mean[j] = T.float32(0)
            for i in range(n[0]):
                mean[j] = mean[j] + data[i, j]
            mean[j] = mean[j] / float_n[0]
var: m
var: stddev
var: stddev dtype: float32
var: i
var: n
var: data
var: data dtype: float32
var: mean
var: mean dtype: float32
var: float_n
var: eps
For loop init variable: j
For loop init variable: i
Index variable: j
Start expression: 0
End expression: m[0]
Index variable: i
Start expression: 0
End expression: n[0]
T.call_extern("float32", "sqrt", stddev[j])
for j in range(m[0]):
    m = T.Buffer((1,), "int32")
    stddev = T.Buffer((4000,))
    stddev[j] = T.float32(0)
    for i in range(n[0]):
        n = T.Buffer((1,), "int32")
        data = T.Buffer((4000, 4000))
        mean = T.Buffer((4000,))
        stddev[j] = stddev[j] + (data[i, j] - mean[j]) * (data[i, j] - mean[j])
    float_n = T.Buffer((1,))
    stddev[j] = stddev[j] / float_n[0]
    stddev[j] = T.call_extern("float32", "sqrt", stddev[j])
    eps = T.Buffer((1,))
    stddev[j] = T.Select(stddev[j] <= eps[0], T.float32(1), stddev[j])
# from tvm.script import tir as T

@T.prim_func
def main(data: T.Buffer((4000, 4000), "float32"), eps: T.Buffer((1,), "float32"), float_n: T.Buffer((1,), "float32"), m: T.Buffer((1,), "int32"), mean: T.Buffer((4000,), "float32"), n: T.Buffer((1,), "int32"), stddev: T.Buffer((4000,), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    for j in range(m[0]):
        stddev[j] = T.float32(0)
        for i in range(n[0]):
            stddev[j] = stddev[j] + (data[i, j] - mean[j]) * (data[i, j] - mean[j])
        stddev[j] = stddev[j] / float_n[0]
        stddev[j] = T.call_extern("float32", "sqrt", stddev[j])
        stddev[j] = T.Select(stddev[j] <= eps[0], T.float32(1), stddev[j])
# from tvm.script import tir as T

@T.prim_func
def main(data: T.Buffer((4000, 4000), "float32"), eps: T.Buffer((1,), "float32"), float_n: T.Buffer((1,), "float32"), m: T.Buffer((1,), "int32"), mean: T.Buffer((4000,), "float32"), n: T.Buffer((1,), "int32"), stddev: T.Buffer((4000,), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    with T.block("root"):
        T.reads()
        T.writes()
        for j in range(m[0]):
            stddev[j] = T.float32(0)
            for i in range(n[0]):
                stddev[j] = stddev[j] + (data[i, j] - mean[j]) * (data[i, j] - mean[j])
            stddev[j] = stddev[j] / float_n[0]
            stddev[j] = T.call_extern("float32", "sqrt", stddev[j])
            stddev[j] = T.Select(stddev[j] <= eps[0], T.float32(1), stddev[j])
var: n
var: j
var: m
var: data
var: data dtype: float32
var: mean
var: mean dtype: float32
var: float_n
var: stddev
var: stddev dtype: float32
For loop init variable: i
For loop init variable: j
Index variable: i
Start expression: 0
End expression: n[0]
Index variable: j
Start expression: 0
End expression: m[0]
T.call_extern("float32", "sqrt", float_n[0])
for i, j in T.grid(n[0], m[0]):
    n = T.Buffer((1,), "int32")
    m = T.Buffer((1,), "int32")
    data = T.Buffer((4000, 4000))
    mean = T.Buffer((4000,))
    data[i, j] = data[i, j] - mean[j]
    float_n = T.Buffer((1,))
    stddev = T.Buffer((4000,))
    data[i, j] = data[i, j] / (T.call_extern("float32", "sqrt", float_n[0]) * stddev[j])
# from tvm.script import tir as T

@T.prim_func
def main(data: T.Buffer((4000, 4000), "float32"), float_n: T.Buffer((1,), "float32"), m: T.Buffer((1,), "int32"), mean: T.Buffer((4000,), "float32"), n: T.Buffer((1,), "int32"), stddev: T.Buffer((4000,), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    for i, j in T.grid(n[0], m[0]):
        data[i, j] = data[i, j] - mean[j]
        data[i, j] = data[i, j] / (T.call_extern("float32", "sqrt", float_n[0]) * stddev[j])
# from tvm.script import tir as T

@T.prim_func
def main(data: T.Buffer((4000, 4000), "float32"), float_n: T.Buffer((1,), "float32"), m: T.Buffer((1,), "int32"), mean: T.Buffer((4000,), "float32"), n: T.Buffer((1,), "int32"), stddev: T.Buffer((4000,), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    with T.block("root"):
        T.reads()
        T.writes()
        for i, j in T.grid(n[0], m[0]):
            data[i, j] = data[i, j] - mean[j]
            data[i, j] = data[i, j] / (T.call_extern("float32", "sqrt", float_n[0]) * stddev[j])
var: m
var: symmat
var: symmat dtype: float32
var: j2
var: i
var: n
var: data
var: data dtype: float32
For loop init variable: j1
For loop init variable: j2
For loop init variable: i
Index variable: j1
Start expression: 0
End expression: m[0] - 1
Index variable: j2
Start expression: j1 + 1
End expression: m[0]
Index variable: i
Start expression: 0
End expression: n[0]
for j1 in range(m[0] - 1):
    m = T.Buffer((1,), "int32")
    symmat = T.Buffer((4000, 4000))
    symmat[j1, j1] = T.float32(1)
    for j2 in range(m[0] - (j1 + 1)):
        j2_offset: T.int32 = j2 + (j1 + 1)
        symmat[j1, j2_offset] = T.float32(0)
        for i in range(n[0]):
            n = T.Buffer((1,), "int32")
            data = T.Buffer((4000, 4000))
            symmat[j1, j2_offset] = symmat[j1, j2_offset] + data[i, j1] * data[i, j2_offset]
        symmat[j2_offset, j1] = symmat[j1, j2_offset]
# from tvm.script import tir as T

@T.prim_func
def main(data: T.Buffer((4000, 4000), "float32"), m: T.Buffer((1,), "int32"), n: T.Buffer((1,), "int32"), symmat: T.Buffer((4000, 4000), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    for j1 in range(m[0] - 1):
        symmat[j1, j1] = T.float32(1)
        for j2 in range(m[0] - (j1 + 1)):
            j2_offset: T.int32 = j2 + (j1 + 1)
            symmat[j1, j2_offset] = T.float32(0)
            for i in range(n[0]):
                symmat[j1, j2_offset] = symmat[j1, j2_offset] + data[i, j1] * data[i, j2_offset]
            symmat[j2_offset, j1] = symmat[j1, j2_offset]
# from tvm.script import tir as T

@T.prim_func
def main(data: T.Buffer((4000, 4000), "float32"), m: T.Buffer((1,), "int32"), n: T.Buffer((1,), "int32"), symmat: T.Buffer((4000, 4000), "float32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    with T.block("root"):
        T.reads()
        T.writes()
        for j1 in range(m[0] - 1):
            symmat[j1, j1] = T.float32(1)
            for j2 in range(m[0] - (j1 + 1)):
                j2_offset: T.int32 = j2 + (j1 + 1)
                symmat[j1, j2_offset] = T.float32(0)
                for i in range(n[0]):
                    symmat[j1, j2_offset] = symmat[j1, j2_offset] + data[i, j1] * data[i, j2_offset]
                symmat[j2_offset, j1] = symmat[j1, j2_offset]
