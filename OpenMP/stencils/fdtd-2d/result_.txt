var: ny
var: ey
var: ey dtype: float32
var: _fict_
var: _fict_ dtype: float32
var: t
For loop init variable: j
Index variable: j
Start expression: 0
End expression: ny[0]
for j in range(ny[0]):
    ny = T.Buffer((1,), "int32")
    ey = T.Buffer((1000, 1000))
    _fict_ = T.Buffer((50,))
    t = T.Buffer((1,), "int32")
    ey[0, j] = _fict_[t[0]]
# from tvm.script import tir as T

@T.prim_func
def main(_fict_: T.Buffer((50,), "float32"), ey: T.Buffer((1000, 1000), "float32"), ny: T.Buffer((1,), "int32"), t: T.Buffer((1,), "int32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    for j in range(ny[0]):
        ey[0, j] = _fict_[t[0]]
# from tvm.script import tir as T

@T.prim_func
def main(_fict_: T.Buffer((50,), "float32"), ey: T.Buffer((1000, 1000), "float32"), ny: T.Buffer((1,), "int32"), t: T.Buffer((1,), "int32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    with T.block("root"):
        T.reads()
        T.writes()
        for j in range(ny[0]):
            ey[0, j] = _fict_[t[0]]
var: nx
var: j
var: ny
var: ey
var: ey dtype: float32
var: hz
var: hz dtype: float32
For loop init variable: i
For loop init variable: j
Index variable: i
Start expression: 1
End expression: nx[0]
Index variable: j
Start expression: 0
End expression: ny[0]
for i in range(nx[0] - 1):
    nx = T.Buffer((1,), "int32")
    i_offset: T.int32 = i + 1
    for j in range(ny[0]):
        ny = T.Buffer((1,), "int32")
        ey = T.Buffer((1000, 1000))
        hz = T.Buffer((1000, 1000))
        ey[i_offset, j] = ey[i_offset, j] - T.float32(0.5) * (hz[i_offset, j] - hz[i_offset - 1, j])
# from tvm.script import tir as T

@T.prim_func
def main(ey: T.Buffer((1000, 1000), "float32"), hz: T.Buffer((1000, 1000), "float32"), nx: T.Buffer((1,), "int32"), ny: T.Buffer((1,), "int32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    for i in range(nx[0] - 1):
        i_offset: T.int32 = i + 1
        for j in range(ny[0]):
            ey[i_offset, j] = ey[i_offset, j] - T.float32(0.5) * (hz[i_offset, j] - hz[i_offset - 1, j])
# from tvm.script import tir as T

@T.prim_func
def main(ey: T.Buffer((1000, 1000), "float32"), hz: T.Buffer((1000, 1000), "float32"), nx: T.Buffer((1,), "int32"), ny: T.Buffer((1,), "int32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    with T.block("root"):
        T.reads()
        T.writes()
        for i in range(nx[0] - 1):
            i_offset: T.int32 = i + 1
            for j in range(ny[0]):
                ey[i_offset, j] = ey[i_offset, j] - T.float32(0.5) * (hz[i_offset, j] - hz[i_offset - 1, j])
var: nx
var: j
var: ny
var: ex
var: ex dtype: float32
var: hz
var: hz dtype: float32
For loop init variable: i
For loop init variable: j
Index variable: i
Start expression: 0
End expression: nx[0]
Index variable: j
Start expression: 1
End expression: ny[0]
for i, j in T.grid(nx[0], ny[0] - 1):
    nx = T.Buffer((1,), "int32")
    ny = T.Buffer((1,), "int32")
    j_offset: T.int32 = j + 1
    ex = T.Buffer((1000, 1000))
    hz = T.Buffer((1000, 1000))
    ex[i, j_offset] = ex[i, j_offset] - T.float32(0.5) * (hz[i, j_offset] - hz[i, j_offset - 1])
# from tvm.script import tir as T

@T.prim_func
def main(ex: T.Buffer((1000, 1000), "float32"), hz: T.Buffer((1000, 1000), "float32"), nx: T.Buffer((1,), "int32"), ny: T.Buffer((1,), "int32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    for i, j in T.grid(nx[0], ny[0] - 1):
        j_offset: T.int32 = j + 1
        ex[i, j_offset] = ex[i, j_offset] - T.float32(0.5) * (hz[i, j_offset] - hz[i, j_offset - 1])
# from tvm.script import tir as T

@T.prim_func
def main(ex: T.Buffer((1000, 1000), "float32"), hz: T.Buffer((1000, 1000), "float32"), nx: T.Buffer((1,), "int32"), ny: T.Buffer((1,), "int32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    with T.block("root"):
        T.reads()
        T.writes()
        for i, j in T.grid(nx[0], ny[0] - 1):
            j_offset: T.int32 = j + 1
            ex[i, j_offset] = ex[i, j_offset] - T.float32(0.5) * (hz[i, j_offset] - hz[i, j_offset - 1])
var: nx
var: j
var: ny
var: hz
var: hz dtype: float32
var: ex
var: ex dtype: float32
var: ey
var: ey dtype: float32
For loop init variable: i
For loop init variable: j
Index variable: i
Start expression: 0
End expression: nx[0] - 1
Index variable: j
Start expression: 0
End expression: ny[0] - 1
for i, j in T.grid(nx[0] - 1, ny[0] - 1):
    nx = T.Buffer((1,), "int32")
    ny = T.Buffer((1,), "int32")
    hz = T.Buffer((1000, 1000))
    ex = T.Buffer((1000, 1000))
    ey = T.Buffer((1000, 1000))
    hz[i, j] = hz[i, j] - T.float32(0.69999999999999996) * (ex[i, j + 1] - ex[i, j] + ey[i + 1, j] - ey[i, j])
# from tvm.script import tir as T

@T.prim_func
def main(ex: T.Buffer((1000, 1000), "float32"), ey: T.Buffer((1000, 1000), "float32"), hz: T.Buffer((1000, 1000), "float32"), nx: T.Buffer((1,), "int32"), ny: T.Buffer((1,), "int32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    for i, j in T.grid(nx[0] - 1, ny[0] - 1):
        hz[i, j] = hz[i, j] - T.float32(0.69999999999999996) * (ex[i, j + 1] - ex[i, j] + ey[i + 1, j] - ey[i, j])
# from tvm.script import tir as T

@T.prim_func
def main(ex: T.Buffer((1000, 1000), "float32"), ey: T.Buffer((1000, 1000), "float32"), hz: T.Buffer((1000, 1000), "float32"), nx: T.Buffer((1,), "int32"), ny: T.Buffer((1,), "int32")):
    T.func_attr({"tir.noalias": T.bool(True)})
    with T.block("root"):
        T.reads()
        T.writes()
        for i, j in T.grid(nx[0] - 1, ny[0] - 1):
            hz[i, j] = hz[i, j] - T.float32(0.69999999999999996) * (ex[i, j + 1] - ex[i, j] + ey[i + 1, j] - ey[i, j])
